name: Secrets and Environment Variables

on:
  workflow_dispatch:

jobs:
  top-env-variables:
    runs-on: ubuntu-latest
    environment: Production

    services:
      mariadb:
        image: mariadb:latest
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: my_database
          MYSQL_USER: my_user
          MYSQL_PASSWORD: my_password
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
        volumes:
          - db-data:/var/lib/mysql

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Wait for MariaDB to be ready
        run: |
          echo "Waiting for MariaDB to become healthy..."
          for i in {1..10}; do
            if docker inspect --format='{{.State.Health.Status}}' ${{ job.services.mariadb.id }} | grep -q "healthy"; then
              echo "MariaDB is healthy!"
              break
            fi
            echo "MariaDB is not healthy yet. Waiting..."
            sleep 10
          done

      - name: Capture MariaDB Logs
        if: failure() || always()
        run: |
          echo "MariaDB container logs:"
          docker logs ${{ job.services.mariadb.id }}

      - name: Apply Django migrations
        env:
          DATABASE_HOST: 127.0.0.1
          DATABASE_NAME: my_database
          DATABASE_USER: my_user
          DATABASE_PASSWORD: my_password
        run: |
          source venv/bin/activate
          cd myproject/
          python manage.py migrate

      - name: Read a Variable
        run: |
          echo "${{ vars.API_URL }}"
          echo "${{ vars.PROD_VAR }}"
          echo "${{ vars.API_URL_URL }}"

      - name: Read a Secret
        run: |
          echo "My prod_secret is ${{ secrets.PRODUCTION_SECRET }}"
          echo "My global_secret is ${{ secrets.MY_SECRET }}"

      - name: Render vars as JSON and save to file
        run: |
          echo '${{ toJSON(vars) }}' > vars.json

      - name: Create .env file from vars.json
        run: |
          echo "Creating .env file..."
          jq -r 'to_entries | .[] | "\(.key)=\(.value)"' vars.json > .env

      - name: Display .env file contents
        run: |
          cat .env
